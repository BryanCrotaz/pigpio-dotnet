{
  "api/Unosquare.WiringPI.WiringPiPin.html": {
    "href": "api/Unosquare.WiringPI.WiringPiPin.html",
    "title": "Enum WiringPiPin | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Enum WiringPiPin Defines all the available Wiring Pi Pin Numbers. Namespace : Unosquare.WiringPI Syntax public enum WiringPiPin Fields Name Description Pin00 WiringPi pin 0. Pin01 WiringPi pin 1. Pin02 WiringPi pin 2. Pin03 WiringPi pin 3. Pin04 WiringPi pin 4. Pin05 WiringPi pin 5. Pin06 WiringPi pin 6. Pin07 WiringPi pin 7. Pin08 WiringPi pin 8. Pin09 WiringPi pin 9. Pin10 WiringPi pin 10. Pin11 WiringPi pin 11. Pin12 WiringPi pin 12. Pin13 WiringPi pin 13. Pin14 WiringPi pin 14. Pin15 WiringPi pin 15. Pin16 WiringPi pin 16. Pin17 WiringPi pin 17. Pin18 WiringPi pin 18. Pin19 WiringPi pin 19. Pin20 WiringPi pin 20. Pin21 WiringPi pin 21. Pin22 WiringPi pin 22. Pin23 WiringPi pin 23. Pin24 WiringPi pin 24. Pin25 WiringPi pin 25. Pin26 WiringPi pin 26. Pin27 WiringPi pin 27. Pin28 WiringPi pin 28. Pin29 WiringPi pin 29. Pin30 WiringPi pin 30. Pin31 WiringPi pin 31. Unknown Unknown WiringPi pin. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.SpiChannel.html": {
    "href": "api/Unosquare.WiringPI.SpiChannel.html",
    "title": "Class SpiChannel | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class SpiChannel Provides access to using the SPI buses on the GPIO. SPI is a bus that works like a ring shift register The number of bytes pushed is equal to the number of bytes received. Inheritance System.Object SpiChannel Namespace : Unosquare.WiringPI Syntax public sealed class SpiChannel : ISpiChannel Fields MaxFrequency The maximum frequency of an SPI channel. Declaration public const int MaxFrequency = 32000000 Field Value Type Description System.Int32 MinFrequency The minimum frequency of an SPI Channel. Declaration public const int MinFrequency = 500000 Field Value Type Description System.Int32 Properties Channel Declaration public int Channel { get; } Property Value Type Description System.Int32 FileDescriptor Declaration public int FileDescriptor { get; } Property Value Type Description System.Int32 Frequency Declaration public int Frequency { get; } Property Value Type Description System.Int32 Methods SendReceive(Byte[]) Declaration public byte[] SendReceive(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Returns Type Description System.Byte [] SendReceiveAsync(Byte[]) Sends data and simultaneously receives the data in the return buffer. Declaration public Task<byte[]> SendReceiveAsync(byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer. Returns Type Description System.Threading.Tasks.Task < System.Byte []> The read bytes from the ring-style bus. Write(Byte[]) Declaration public void Write(byte[] buffer) Parameters Type Name Description System.Byte [] buffer WriteAsync(Byte[]) Writes the specified buffer the the underlying FileDescriptor. Do not use this method if you expect data back. This method is efficient if used in a fire-and-forget scenario like sending data over to those long RGB LED strips. Declaration public Task WriteAsync(byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer. Returns Type Description System.Threading.Tasks.Task The awaitable task. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.PwmMode.html": {
    "href": "api/Unosquare.WiringPI.PwmMode.html",
    "title": "Enum PwmMode | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Enum PwmMode The PWM mode. Namespace : Unosquare.WiringPI Syntax public enum PwmMode Fields Name Description Balanced PWM pulses are sent as a balanced signal (default, newer mode) MarkSign PWM pulses are sent using mark-sign patterns (old school) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Native.html": {
    "href": "api/Unosquare.WiringPI.Native.html",
    "title": "Namespace Unosquare.WiringPI.Native | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Namespace Unosquare.WiringPI.Native Classes WiringPi Provides native C WiringPi Library function call wrappers All credit for the native library goes to the author of http://wiringpi.com/ The wrappers were written based on https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.h . Delegates InterruptServiceRoutineCallback A delegate defining a callback for an Interrupt Service Routine. ThreadWorker Defines the body of a thread worker. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Native.ThreadWorker.html": {
    "href": "api/Unosquare.WiringPI.Native.ThreadWorker.html",
    "title": "Delegate ThreadWorker | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Delegate ThreadWorker Defines the body of a thread worker. Namespace : Unosquare.WiringPI.Native Syntax public delegate void ThreadWorker(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.GpioController.html": {
    "href": "api/Unosquare.WiringPI.GpioController.html",
    "title": "Class GpioController | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class GpioController Represents the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the Wiring Pi library. Inheritance System.Object GpioController Namespace : Unosquare.WiringPI Syntax public sealed class GpioController : IGpioController Properties Count Gets the number of registered pins in the controller. Declaration public int Count { get; } Property Value Type Description System.Int32 HeaderP1 Provides all the pins on Header P1 of the Pi as a lookup by physical header pin number. This header is the main header and it is the one commonly used. Declaration public ReadOnlyDictionary<int, GpioPin> HeaderP1 { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyDictionary < System.Int32 , GpioPin > HeaderP5 Provides all the pins on Header P5 of the Pi as a lookup by physical header pin number. This header is the secondary header and it is rarely used. Declaration public ReadOnlyDictionary<int, GpioPin> HeaderP5 { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyDictionary < System.Int32 , GpioPin > IsInitialized Determines if the underlying GPIO controller has been initialized properly. Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean true if the controller is properly initialized; otherwise, false . Item[BcmPin] Declaration public IGpioPin this[BcmPin bcmPin] { get; } Parameters Type Name Description BcmPin bcmPin Property Value Type Description IGpioPin Item[P1] Declaration public IGpioPin this[P1 pinNumber] { get; } Parameters Type Name Description P1 pinNumber Property Value Type Description IGpioPin Item[P5] Declaration public IGpioPin this[P5 pinNumber] { get; } Parameters Type Name Description P5 pinNumber Property Value Type Description IGpioPin Item[Int32] Declaration public IGpioPin this[int bcmPinNumber] { get; } Parameters Type Name Description System.Int32 bcmPinNumber Property Value Type Description IGpioPin Item[WiringPiPin] Gets the GpioPin with the specified Wiring Pi pin number. Declaration public GpioPin this[WiringPiPin pinNumber] { get; } Parameters Type Name Description WiringPiPin pinNumber The pin number. Property Value Type Description GpioPin The GpioPin . Pin00 Provides direct access to Pin known as BCM0. Declaration public GpioPin Pin00 { get; } Property Value Type Description GpioPin Pin01 Provides direct access to Pin known as BCM1. Declaration public GpioPin Pin01 { get; } Property Value Type Description GpioPin Pin02 Provides direct access to Pin known as BCM2. Declaration public GpioPin Pin02 { get; } Property Value Type Description GpioPin Pin03 Provides direct access to Pin known as BCM3. Declaration public GpioPin Pin03 { get; } Property Value Type Description GpioPin Pin04 Provides direct access to Pin known as BCM4. Declaration public GpioPin Pin04 { get; } Property Value Type Description GpioPin Pin05 Provides direct access to Pin known as BCM5. Declaration public GpioPin Pin05 { get; } Property Value Type Description GpioPin Pin06 Provides direct access to Pin known as BCM6. Declaration public GpioPin Pin06 { get; } Property Value Type Description GpioPin Pin07 Provides direct access to Pin known as BCM7. Declaration public GpioPin Pin07 { get; } Property Value Type Description GpioPin Pin08 Provides direct access to Pin known as BCM8. Declaration public GpioPin Pin08 { get; } Property Value Type Description GpioPin Pin09 Provides direct access to Pin known as BCM9. Declaration public GpioPin Pin09 { get; } Property Value Type Description GpioPin Pin10 Provides direct access to Pin known as BCM10. Declaration public GpioPin Pin10 { get; } Property Value Type Description GpioPin Pin11 Provides direct access to Pin known as BCM11. Declaration public GpioPin Pin11 { get; } Property Value Type Description GpioPin Pin12 Provides direct access to Pin known as BCM12. Declaration public GpioPin Pin12 { get; } Property Value Type Description GpioPin Pin13 Provides direct access to Pin known as BCM13. Declaration public GpioPin Pin13 { get; } Property Value Type Description GpioPin Pin14 Provides direct access to Pin known as BCM14. Declaration public GpioPin Pin14 { get; } Property Value Type Description GpioPin Pin15 Provides direct access to Pin known as BCM15. Declaration public GpioPin Pin15 { get; } Property Value Type Description GpioPin Pin16 Provides direct access to Pin known as BCM16. Declaration public GpioPin Pin16 { get; } Property Value Type Description GpioPin Pin17 Provides direct access to Pin known as BCM17. Declaration public GpioPin Pin17 { get; } Property Value Type Description GpioPin Pin18 Provides direct access to Pin known as BCM18. Declaration public GpioPin Pin18 { get; } Property Value Type Description GpioPin Pin19 Provides direct access to Pin known as BCM19. Declaration public GpioPin Pin19 { get; } Property Value Type Description GpioPin Pin20 Provides direct access to Pin known as BCM20. Declaration public GpioPin Pin20 { get; } Property Value Type Description GpioPin Pin21 Provides direct access to Pin known as BCM21. Declaration public GpioPin Pin21 { get; } Property Value Type Description GpioPin Pin22 Provides direct access to Pin known as BCM22. Declaration public GpioPin Pin22 { get; } Property Value Type Description GpioPin Pin23 Provides direct access to Pin known as BCM23. Declaration public GpioPin Pin23 { get; } Property Value Type Description GpioPin Pin24 Provides direct access to Pin known as BCM24. Declaration public GpioPin Pin24 { get; } Property Value Type Description GpioPin Pin25 Provides direct access to Pin known as BCM25. Declaration public GpioPin Pin25 { get; } Property Value Type Description GpioPin Pin26 Provides direct access to Pin known as BCM26. Declaration public GpioPin Pin26 { get; } Property Value Type Description GpioPin Pin27 Provides direct access to Pin known as BCM27. Declaration public GpioPin Pin27 { get; } Property Value Type Description GpioPin Pin28 Provides direct access to Pin known as BCM28 (available on Header P5). Declaration public GpioPin Pin28 { get; } Property Value Type Description GpioPin Pin29 Provides direct access to Pin known as BCM29 (available on Header P5). Declaration public GpioPin Pin29 { get; } Property Value Type Description GpioPin Pin30 Provides direct access to Pin known as BCM30 (available on Header P5). Declaration public GpioPin Pin30 { get; } Property Value Type Description GpioPin Pin31 Provides direct access to Pin known as BCM31 (available on Header P5). Declaration public GpioPin Pin31 { get; } Property Value Type Description GpioPin Pins Gets a red-only collection of all pins. Declaration public ReadOnlyCollection<GpioPin> Pins { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < GpioPin > PwmBaseFrequency Gets the PWM base frequency (in Hz). Declaration public int PwmBaseFrequency { get; } Property Value Type Description System.Int32 Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<GpioPin> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < GpioPin > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. ReadByte() This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Please note this function is undocumented and unsupported. Declaration public byte ReadByte() Returns Type Description System.Byte A byte from the GPIO. Exceptions Type Condition System.InvalidOperationException PinMode. ReadByteAsync() This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Please note this function is undocumented and unsupported. Declaration public Task<byte> ReadByteAsync() Returns Type Description System.Threading.Tasks.Task < System.Byte > A byte from the GPIO. SetPadDrive(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public void SetPadDrive(int group, int value) Parameters Type Name Description System.Int32 group The group. System.Int32 value The value. SetPadDriveAsync(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public Task SetPadDriveAsync(int group, int value) Parameters Type Name Description System.Int32 group The group. System.Int32 value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. WriteByte(Byte) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public void WriteByte(byte value) Parameters Type Name Description System.Byte value The value. Exceptions Type Condition System.InvalidOperationException PinMode. WriteByteAsync(Byte) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public Task WriteByteAsync(byte value) Parameters Type Name Description System.Byte value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. Explicit Interface Implementations IEnumerable<IGpioPin>.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator<IGpioPin> IEnumerable<IGpioPin>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IGpioPin > An System.Collections.IEnumerator object that can be used to iterate through the collection. IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Native.InterruptServiceRoutineCallback.html": {
    "href": "api/Unosquare.WiringPI.Native.InterruptServiceRoutineCallback.html",
    "title": "Delegate InterruptServiceRoutineCallback | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Delegate InterruptServiceRoutineCallback A delegate defining a callback for an Interrupt Service Routine. Namespace : Unosquare.WiringPI.Native Syntax public delegate void InterruptServiceRoutineCallback(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.I2CBus.html": {
    "href": "api/Unosquare.WiringPI.I2CBus.html",
    "title": "Class I2CBus | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class I2CBus A simple wrapper for the I2c bus on the Raspberry Pi. Inheritance System.Object I2CBus Namespace : Unosquare.WiringPI Syntax public class I2CBus : II2CBus Properties Devices Declaration public ReadOnlyCollection<II2CDevice> Devices { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < II2CDevice > Item[Int32] Declaration public II2CDevice this[int deviceId] { get; } Parameters Type Name Description System.Int32 deviceId Property Value Type Description II2CDevice Methods AddDevice(Int32) Declaration public II2CDevice AddDevice(int deviceId) Parameters Type Name Description System.Int32 deviceId Returns Type Description II2CDevice Exceptions Type Condition System.Collections.Generic.KeyNotFoundException When the device file descriptor is not found. GetDeviceById(Int32) Declaration public II2CDevice GetDeviceById(int deviceId) Parameters Type Name Description System.Int32 deviceId Returns Type Description II2CDevice Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Threading.html": {
    "href": "api/Unosquare.WiringPI.Threading.html",
    "title": "Class Threading | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class Threading Use this class to access threading methods using interop. Inheritance System.Object Threading Namespace : Unosquare.WiringPI Syntax public class Threading : IThreading Methods Lock(ThreadLockKey) These allow you to synchronize variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. Declaration public void Lock(ThreadLockKey key) Parameters Type Name Description ThreadLockKey key The key. SetThreadPriority(Int32) This attempts to shift your program (or thread in a multi-threaded program) to a higher priority and enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). This won’t make your program go any faster, but it will give it a bigger slice of time when other programs are running. The priority parameter works relative to others – so you can make one program priority 1 and another priority 2 and it will have the same effect as setting one to 10 and the other to 90 (as long as no other programs are running with elevated priorities). Declaration public void SetThreadPriority(int priority) Parameters Type Name Description System.Int32 priority The priority. StartThread(Action) This is really nothing more than a simplified interface to the Posix threads mechanism that Linux supports. See the manual pages on Posix threads (man pthread) if you need more control over them. Declaration public void StartThread(Action worker) Parameters Type Name Description System.Action worker Exceptions Type Condition System.ArgumentNullException worker. StartThreadEx(Action<UIntPtr>, UIntPtr) Declaration public UIntPtr StartThreadEx(Action<UIntPtr> worker, UIntPtr userData) Parameters Type Name Description System.Action < System.UIntPtr > worker System.UIntPtr userData Returns Type Description System.UIntPtr StopThreadEx(UIntPtr) Declaration public void StopThreadEx(UIntPtr handle) Parameters Type Name Description System.UIntPtr handle Unlock(ThreadLockKey) These allow you to synchronize variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. Declaration public void Unlock(ThreadLockKey key) Parameters Type Name Description ThreadLockKey key The key. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.I2CDevice.html": {
    "href": "api/Unosquare.WiringPI.I2CDevice.html",
    "title": "Class I2CDevice | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class I2CDevice Represents a device on the I2C Bus. Inheritance System.Object I2CDevice Namespace : Unosquare.WiringPI Syntax public class I2CDevice : II2CDevice Properties DeviceId Declaration public int DeviceId { get; } Property Value Type Description System.Int32 FileDescriptor Declaration public int FileDescriptor { get; } Property Value Type Description System.Int32 Methods Read() Declaration public byte Read() Returns Type Description System.Byte Read(Int32) Reads a buffer of the specified length, one byte at a time. Declaration public byte[] Read(int length) Parameters Type Name Description System.Int32 length The length. Returns Type Description System.Byte [] The byte array from device. ReadAddressByte(Int32) These read an 8 or 16-bit value from the device register indicated. Declaration public byte ReadAddressByte(int address) Parameters Type Name Description System.Int32 address The register. Returns Type Description System.Byte The address byte from device. ReadAddressWord(Int32) These read an 8 or 16-bit value from the device register indicated. Declaration public ushort ReadAddressWord(int address) Parameters Type Name Description System.Int32 address The register. Returns Type Description System.UInt16 The address word from device. ReadAsync() Reads a byte from the specified file descriptor. Declaration public Task<byte> ReadAsync() Returns Type Description System.Threading.Tasks.Task < System.Byte > The byte from device. ReadAsync(Int32) Reads a buffer of the specified length, one byte at a time. Declaration public Task<byte[]> ReadAsync(int length) Parameters Type Name Description System.Int32 length The length. Returns Type Description System.Threading.Tasks.Task < System.Byte []> The byte array from device. Write(Byte) Writes a byte of data the specified file descriptor. Declaration public void Write(byte data) Parameters Type Name Description System.Byte data The data. Write(Byte[]) Writes a set of bytes to the specified file descriptor. Declaration public void Write(byte[] data) Parameters Type Name Description System.Byte [] data The data. WriteAddressByte(Int32, Byte) These write an 8 or 16-bit data value into the device register indicated. Declaration public void WriteAddressByte(int address, byte data) Parameters Type Name Description System.Int32 address The register. System.Byte data The data. WriteAddressWord(Int32, UInt16) These write an 8 or 16-bit data value into the device register indicated. Declaration public void WriteAddressWord(int address, ushort data) Parameters Type Name Description System.Int32 address The register. System.UInt16 data The data. WriteAsync(Byte) Writes a byte of data the specified file descriptor. Declaration public Task WriteAsync(byte data) Parameters Type Name Description System.Byte data The data. Returns Type Description System.Threading.Tasks.Task The awaitable task. WriteAsync(Byte[]) Writes a set of bytes to the specified file descriptor. Declaration public Task WriteAsync(byte[] data) Parameters Type Name Description System.Byte [] data The data. Returns Type Description System.Threading.Tasks.Task The awaitable task. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.GpioPin.html": {
    "href": "api/Unosquare.WiringPI.GpioPin.html",
    "title": "Class GpioPin | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class GpioPin Represents a GPIO Pin, its location and its capabilities. Full pin reference available here: http://pinout.xyz/pinout/pin31_gpio6 and http://wiringpi.com/pins/ . Inheritance System.Object GpioPin Namespace : Unosquare.WiringPI Syntax public sealed class GpioPin : IGpioPin Properties BcmPin Declaration public BcmPin BcmPin { get; } Property Value Type Description BcmPin BcmPinNumber Declaration public int BcmPinNumber { get; } Property Value Type Description System.Int32 Capabilities Gets the hardware mode capabilities of this pin. Declaration public PinCapability Capabilities { get; } Property Value Type Description PinCapability Header Declaration public GpioHeader Header { get; } Property Value Type Description GpioHeader InputPullMode Declaration public GpioPinResistorPullMode InputPullMode { get; set; } Property Value Type Description GpioPinResistorPullMode InterruptCallback Gets the interrupt callback. Returns null if no interrupt has been registered. Declaration public InterruptServiceRoutineCallback InterruptCallback { get; } Property Value Type Description InterruptServiceRoutineCallback InterruptEdgeDetection Gets the interrupt edge detection mode. Declaration public EdgeDetection InterruptEdgeDetection { get; } Property Value Type Description EdgeDetection IsInSoftPwmMode Gets a value indicating whether this pin is in software based PWM mode. Declaration public bool IsInSoftPwmMode { get; } Property Value Type Description System.Boolean true if this instance is in soft PWM mode; otherwise, false . IsInSoftToneMode Gets a value indicating whether this instance is in software based tone generator mode. Declaration public bool IsInSoftToneMode { get; } Property Value Type Description System.Boolean true if this instance is in soft tone mode; otherwise, false . Name Gets the friendly name of the pin. Declaration public string Name { get; } Property Value Type Description System.String PhysicalPinNumber Declaration public int PhysicalPinNumber { get; } Property Value Type Description System.Int32 PinMode Declaration public GpioPinDriveMode PinMode { get; set; } Property Value Type Description GpioPinDriveMode Exceptions Type Condition System.NotSupportedException Thrown when a pin does not support the given operation mode. PwmClockDivisor Gets or sets the PWM clock divisor. Declaration public int PwmClockDivisor { get; set; } Property Value Type Description System.Int32 The PWM clock divisor. Exceptions Type Condition System.InvalidOperationException When pin mode is not set to PWM output. PwmMode The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, however the default mode in the Pi is “balanced”. Declaration public PwmMode PwmMode { get; set; } Property Value Type Description PwmMode The PWM mode. Exceptions Type Condition System.InvalidOperationException When pin mode is not set a Pwn output. PwmRange This sets the range register in the PWM generator. The default is 1024. Declaration public uint PwmRange { get; set; } Property Value Type Description System.UInt32 The PWM range. Exceptions Type Condition System.InvalidOperationException When pin mode is not set to PWM output. PwmRegister Gets or sets the PWM register. Values should be between 0 and 1024. Declaration public int PwmRegister { get; set; } Property Value Type Description System.Int32 The PWM register. SoftPwmRange Gets the software PWM range used upon starting the PWM. Declaration public int SoftPwmRange { get; } Property Value Type Description System.Int32 SoftPwmValue Gets or sets the software PWM value on the pin. Declaration public int SoftPwmValue { get; set; } Property Value Type Description System.Int32 The soft PWM value. Exceptions Type Condition System.InvalidOperationException StartSoftPwm. SoftToneFrequency Gets or sets the soft tone frequency. 0 to 5000 Hz is typical. Declaration public int SoftToneFrequency { get; set; } Property Value Type Description System.Int32 The soft tone frequency. Exceptions Type Condition System.InvalidOperationException When soft tones cannot be initialized on the pin. Value Declaration public bool Value { get; set; } Property Value Type Description System.Boolean WiringPiPinNumber Gets the WiringPi Pin number. Declaration public WiringPiPin WiringPiPinNumber { get; } Property Value Type Description WiringPiPin Methods HasCapability(PinCapability) Determines whether the specified capability has capability. Declaration public bool HasCapability(PinCapability capability) Parameters Type Name Description PinCapability capability The capability. Returns Type Description System.Boolean true if the specified capability has capability; otherwise, false . Read() Reads the digital value on the pin as a boolean value. Declaration public bool Read() Returns Type Description System.Boolean The state of the pin. ReadAsync() Reads the digital value on the pin as a boolean value. Declaration public Task<bool> ReadAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > The state of the pin. ReadLevel() Reads the analog value on the pin. This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public int ReadLevel() Returns Type Description System.Int32 The analog level. Exceptions Type Condition System.InvalidOperationException When the pin mode is not configured as an input. ReadLevelAsync() Reads the analog value on the pin. This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public Task<int> ReadLevelAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > The analog level. ReadValue() Reads the digital value on the pin as a High or Low value. Declaration public GpioPinValue ReadValue() Returns Type Description GpioPinValue The state of the pin. ReadValueAsync() Reads the digital value on the pin as a High or Low value. Declaration public Task<GpioPinValue> ReadValueAsync() Returns Type Description System.Threading.Tasks.Task < GpioPinValue > The state of the pin. RegisterInterruptCallback(EdgeDetection, Action) Declaration public void RegisterInterruptCallback(EdgeDetection edgeDetection, Action callback) Parameters Type Name Description EdgeDetection edgeDetection System.Action callback Exceptions Type Condition System.ArgumentNullException callback. RegisterInterruptCallback(EdgeDetection, Action<Int32, Int32, UInt32>) Declaration public void RegisterInterruptCallback(EdgeDetection edgeDetection, Action<int, int, uint> callback) Parameters Type Name Description EdgeDetection edgeDetection System.Action < System.Int32 , System.Int32 , System.UInt32 > callback StartSoftPwm(Int32, Int32) Starts the software based PWM on this pin. Declaration public void StartSoftPwm(int value, int range) Parameters Type Name Description System.Int32 value The value. System.Int32 range The range. Exceptions Type Condition System.NotSupportedException When the pin does not suppoert PWM. System.InvalidOperationException StartSoftPwm or. WaitForValue(GpioPinValue, Int32) Wait for specific pin status. Declaration public bool WaitForValue(GpioPinValue status, int timeOutMillisecond) Parameters Type Name Description GpioPinValue status status to check. System.Int32 timeOutMillisecond timeout to reach status. Returns Type Description System.Boolean true/false. Write(GpioPinValue) Declaration public void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value Write(Boolean) Writes the specified bit value. This method performs a digital write. Declaration public void Write(bool value) Parameters Type Name Description System.Boolean value if set to true [value]. Write(Int32) Writes the specified value. 0 for low, any other value for high This method performs a digital write. Declaration public void Write(int value) Parameters Type Name Description System.Int32 value The value. WriteAsync(GpioPinValue) Writes the value asynchronously. Declaration public Task WriteAsync(GpioPinValue value) Parameters Type Name Description GpioPinValue value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. WriteAsync(Boolean) Writes the specified bit value. This method performs a digital write. Declaration public Task WriteAsync(bool value) Parameters Type Name Description System.Boolean value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. WriteAsync(Int32) Writes the specified value. 0 for low, any other value for high This method performs a digital write. Declaration public Task WriteAsync(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. WriteLevel(Int32) Writes the specified value as an analog level. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public void WriteLevel(int value) Parameters Type Name Description System.Int32 value The value. WriteLevelAsync(Int32) Writes the specified value as an analog level. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public Task WriteLevelAsync(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description System.Threading.Tasks.Task The awaitable task. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Timing.html": {
    "href": "api/Unosquare.WiringPI.Timing.html",
    "title": "Class Timing | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class Timing Provides access to timing and threading properties and methods. Inheritance System.Object Timing Namespace : Unosquare.WiringPI Syntax public class Timing : ITiming Properties Microseconds This returns a number representing the number of microseconds since your program initialized the GPIO controller It returns an unsigned 32-bit number which wraps after approximately 71 minutes. Declaration public uint Microseconds { get; } Property Value Type Description System.UInt32 Milliseconds This returns a number representing the number of milliseconds since your program initialized the GPIO controller. It returns an unsigned 32-bit number which wraps after 49 days. Declaration public uint Milliseconds { get; } Property Value Type Description System.UInt32 Methods Sleep(UInt32) Declaration public static void Sleep(uint millis) Parameters Type Name Description System.UInt32 millis SleepMicroseconds(UInt32) Declaration public void SleepMicroseconds(uint micros) Parameters Type Name Description System.UInt32 micros SleepMilliseconds(UInt32) Declaration public void SleepMilliseconds(uint millis) Parameters Type Name Description System.UInt32 millis Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.SystemInfo.html": {
    "href": "api/Unosquare.WiringPI.SystemInfo.html",
    "title": "Class SystemInfo | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class SystemInfo Represents the WiringPI system info. Inheritance System.Object SystemInfo Namespace : Unosquare.WiringPI Syntax public class SystemInfo : ISystemInfo Properties BoardRevision Declaration public BoardRevision BoardRevision { get; } Property Value Type Description BoardRevision LibraryVersion Declaration public Version LibraryVersion { get; } Property Value Type Description System.Version Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.SpiBus.html": {
    "href": "api/Unosquare.WiringPI.SpiBus.html",
    "title": "Class SpiBus | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class SpiBus The SPI Bus containing the 2 SPI channels. Inheritance System.Object SpiBus Namespace : Unosquare.WiringPI Syntax public class SpiBus : ISpiBus Properties Channel0 Declaration public ISpiChannel Channel0 { get; } Property Value Type Description ISpiChannel Channel0Frequency Declaration public int Channel0Frequency { get; set; } Property Value Type Description System.Int32 Channel1 Declaration public ISpiChannel Channel1 { get; } Property Value Type Description ISpiChannel Channel1Frequency Declaration public int Channel1Frequency { get; set; } Property Value Type Description System.Int32 DefaultFrequency Declaration public int DefaultFrequency { get; } Property Value Type Description System.Int32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.html": {
    "href": "api/Unosquare.WiringPI.html",
    "title": "Namespace Unosquare.WiringPI | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Namespace Unosquare.WiringPI Classes GpioController Represents the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the Wiring Pi library. GpioPin Represents a GPIO Pin, its location and its capabilities. Full pin reference available here: http://pinout.xyz/pinout/pin31_gpio6 and http://wiringpi.com/pins/ . I2CBus A simple wrapper for the I2c bus on the Raspberry Pi. I2CDevice Represents a device on the I2C Bus. SpiBus The SPI Bus containing the 2 SPI channels. SpiChannel Provides access to using the SPI buses on the GPIO. SPI is a bus that works like a ring shift register The number of bytes pushed is equal to the number of bytes received. SystemInfo Represents the WiringPI system info. Threading Use this class to access threading methods using interop. Timing Provides access to timing and threading properties and methods. Enums PinCapability Defines the different pin capabilities. PwmMode The PWM mode. WiringPiPin Defines all the available Wiring Pi Pin Numbers. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "wiringpi-dotnet | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "wiringpi-dotnet Provides complete managed access to the popular wiringpi C library"
  },
  "api/Unosquare.WiringPI.PinCapability.html": {
    "href": "api/Unosquare.WiringPI.PinCapability.html",
    "title": "Enum PinCapability | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Enum PinCapability Defines the different pin capabilities. Namespace : Unosquare.WiringPI Syntax [Flags] public enum PinCapability Fields Name Description GP General Purpose capability: Digital and Analog Read/Write GPCLK General Purpose Clock (not PWM) I2CSCL i2c clock channel I2CSDA i2c data channel PWM Hardware Pule Width Modulation SPICLK SPI Clock channel SPICS SPI Chip Select Channel SPIMISO SPI Master In, Slave Out channel SPIMOSI SPI Master Out, Slave In channel UARTRTS UART Request to Send Channel UARTRXD UART Receive Channel UARTTXD UART Transmit Channel Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.WiringPI.Native.WiringPi.html": {
    "href": "api/Unosquare.WiringPI.Native.WiringPi.html",
    "title": "Class WiringPi | Unosquare Raspbery Pi - WiringPi for .net",
    "keywords": "Class WiringPi Provides native C WiringPi Library function call wrappers All credit for the native library goes to the author of http://wiringpi.com/ The wrappers were written based on https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.h . Inheritance System.Object WiringPi Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.WiringPI.Native Syntax public class WiringPi Methods AnalogRead(Int32) This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public static int AnalogRead(int pin) Parameters Type Name Description System.Int32 pin The pin. Returns Type Description System.Int32 The result code. AnalogWrite(Int32, Int32) This writes the given value to the supplied analog pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public static void AnalogWrite(int pin, int value) Parameters Type Name Description System.Int32 pin The pin. System.Int32 value The value. Delay(UInt32) This causes program execution to pause for at least howLong milliseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer or approximately 49 days. Declaration public static void Delay(uint howLong) Parameters Type Name Description System.UInt32 howLong The how long. DelayMicroseconds(UInt32) This causes program execution to pause for at least howLong microseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer microseconds or approximately 71 minutes. Delays under 100 microseconds are timed using a hard-coded loop continually polling the system time, Delays over 100 microseconds are done using the system nanosleep() function – You may need to consider the implications of very short delays on the overall performance of the system, especially if using threads. Declaration public static void DelayMicroseconds(uint howLong) Parameters Type Name Description System.UInt32 howLong The how long. DigitalRead(Int32) This function returns the value read at the given pin. It will be HIGH or LOW (1 or 0) depending on the logic level at the pin. Declaration public static int DigitalRead(int pin) Parameters Type Name Description System.Int32 pin The pin. Returns Type Description System.Int32 The result code. DigitalReadByte() Undocumented function This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Declaration public static uint DigitalReadByte() Returns Type Description System.UInt32 The result code. DigitalReadByte2() Undocumented function This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Declaration public static uint DigitalReadByte2() Returns Type Description System.UInt32 The result code. DigitalWrite(Int32, Int32) Writes the value HIGH or LOW (1 or 0) to the given pin which must have been previously set as an output. WiringPi treats any non-zero number as HIGH, however 0 is the only representation of LOW. Declaration public static void DigitalWrite(int pin, int value) Parameters Type Name Description System.Int32 pin The pin. System.Int32 value The value. DigitalWriteByte(Int32) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public static void DigitalWriteByte(int value) Parameters Type Name Description System.Int32 value The value. DigitalWriteByte2(Int32) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public static void DigitalWriteByte2(int value) Parameters Type Name Description System.Int32 value The value. GetAlt(Int32) Undocumented function. Declaration public static int GetAlt(int pin) Parameters Type Name Description System.Int32 pin The pin. Returns Type Description System.Int32 The result code. GpioClockSet(Int32, Int32) Undocumented function. Declaration public static void GpioClockSet(int pin, int freq) Parameters Type Name Description System.Int32 pin The pin. System.Int32 freq The freq. Micros() This returns a number representing the number of microseconds since your program called one of the wiringPiSetup functions. It returns an unsigned 32-bit number which wraps after approximately 71 minutes. Declaration public static uint Micros() Returns Type Description System.UInt32 The result code. Millis() This returns a number representing the number of milliseconds since your program called one of the wiringPiSetup functions. It returns an unsigned 32-bit number which wraps after 49 days. Declaration public static uint Millis() Returns Type Description System.UInt32 The result code. PhysPinToGpio(Int32) This returns the BCM_GPIO pin number of the supplied physical pin on the P1 connector. Declaration public static int PhysPinToGpio(int physPin) Parameters Type Name Description System.Int32 physPin The physical pin. Returns Type Description System.Int32 The result code. PiBoardId(ref Int32, ref Int32, ref Int32, ref Int32) This function is undocumented. Declaration public static int PiBoardId(ref int model, ref int mem, ref int maker, ref int overVolted) Parameters Type Name Description System.Int32 model The model. System.Int32 mem The memory. System.Int32 maker The maker. System.Int32 overVolted The over volted. Returns Type Description System.Int32 The result code. PiBoardRev() This returns the board revision of the Raspberry Pi. It will be either 1 or 2. Some of the BCM_GPIO pins changed number and function when moving from board revision 1 to 2, so if you are using BCM_GPIO pin numbers, then you need to be aware of the differences. Declaration public static int PiBoardRev() Returns Type Description System.Int32 The result code. PiHiPri(Int32) This attempts to shift your program (or thread in a multi-threaded program) to a higher priority and enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). This won’t make your program go any faster, but it will give it a bigger slice of time when other programs are running. The priority parameter works relative to others – so you can make one program priority 1 and another priority 2 and it will have the same effect as setting one to 10 and the other to 90 (as long as no other programs are running with elevated priorities) The return value is 0 for success and -1 for error. If an error is returned, the program should then consult the errno global variable, as per the usual conventions. Note: Only programs running as root can change their priority. If called from a non-root program then nothing happens. Declaration public static int PiHiPri(int priority) Parameters Type Name Description System.Int32 priority The priority. Returns Type Description System.Int32 The result code. PiLock(Int32) These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a key. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example. Declaration public static void PiLock(int key) Parameters Type Name Description System.Int32 key The key. PinMode(Int32, Int32) This sets the mode of a pin to either INPUT, OUTPUT, PWM_OUTPUT or GPIO_CLOCK. Note that only wiringPi pin 1 (BCM_GPIO 18) supports PWM output and only wiringPi pin 7 (BCM_GPIO 4) supports CLOCK output modes. This function has no effect when in Sys mode. If you need to change the pin mode, then you can do it with the gpio program in a script before you start your program. Declaration public static void PinMode(int pin, int mode) Parameters Type Name Description System.Int32 pin The pin. System.Int32 mode The mode. PinModeAlt(Int32, Int32) This function is undocumented. Declaration public static void PinModeAlt(int pin, int mode) Parameters Type Name Description System.Int32 pin The pin. System.Int32 mode The mode. PiThreadCreate(ThreadWorker) This function creates a thread which is another function in your program previously declared using the PI_THREAD declaration. This function is then run concurrently with your main program. An example may be to have this function wait for an interrupt while your program carries on doing other tasks. The thread can indicate an event, or action by using global variables to communicate back to the main program, or other threads. Declaration public static int PiThreadCreate(ThreadWorker method) Parameters Type Name Description ThreadWorker method The method. Returns Type Description System.Int32 The result code. PiUnlock(Int32) These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a key. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example. Declaration public static void PiUnlock(int key) Parameters Type Name Description System.Int32 key The key. PullUpDnControl(Int32, Int32) This sets the pull-up or pull-down resistor mode on the given pin, which should be set as an input. Unlike the Arduino, the BCM2835 has both pull-up an down internal resistors. The parameter pud should be; PUD_OFF, (no pull up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) The internal pull up/down resistors have a value of approximately 50KΩ on the Raspberry Pi. This function has no effect on the Raspberry Pi’s GPIO pins when in Sys mode. If you need to activate a pull-up/pull-down, then you can do it with the gpio program in a script before you start your program. Declaration public static void PullUpDnControl(int pin, int pud) Parameters Type Name Description System.Int32 pin The pin. System.Int32 pud The pud. PwmSetClock(Int32) This sets the divisor for the PWM clock. Note: The PWM control functions can not be used when in Sys mode. To understand more about the PWM system, you’ll need to read the Broadcom ARM peripherals manual. Declaration public static void PwmSetClock(int divisor) Parameters Type Name Description System.Int32 divisor The divisor. PwmSetMode(Int32) The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, however the default mode in the Pi is “balanced”. You can switch modes by supplying the parameter: PWM_MODE_BAL or PWM_MODE_MS. Declaration public static void PwmSetMode(int mode) Parameters Type Name Description System.Int32 mode The mode. PwmSetRange(UInt32) This sets the range register in the PWM generator. The default is 1024. Declaration public static void PwmSetRange(uint range) Parameters Type Name Description System.UInt32 range The range. PwmToneWrite(Int32, Int32) Undocumented function. Declaration public static int PwmToneWrite(int pin, int freq) Parameters Type Name Description System.Int32 pin The pin. System.Int32 freq The freq. Returns Type Description System.Int32 The result code. PwmWrite(Int32, Int32) Writes the value to the PWM register for the given pin. The Raspberry Pi has one on-board PWM pin, pin 1 (BMC_GPIO 18, Phys 12) and the range is 0-1024. Other PWM devices may have other PWM ranges. This function is not able to control the Pi’s on-board PWM when in Sys mode. Declaration public static void PwmWrite(int pin, int value) Parameters Type Name Description System.Int32 pin The pin. System.Int32 value The value. SerialClose(Int32) Closes the device identified by the file descriptor given. Declaration public static int SerialClose(int fd) Parameters Type Name Description System.Int32 fd The fd. Returns Type Description System.Int32 The result. SerialDataAvail(Int32) Returns the number of characters available for reading, or -1 for any error condition, in which case errno will be set appropriately. Declaration public static int SerialDataAvail(int fd) Parameters Type Name Description System.Int32 fd The fd. Returns Type Description System.Int32 The result. SerialFlush(Int32) This discards all data received, or waiting to be send down the given device. Declaration public static void SerialFlush(int fd) Parameters Type Name Description System.Int32 fd The fd. SerialGetchar(Int32) Returns the next character available on the serial device. This call will block for up to 10 seconds if no data is available (when it will return -1). Declaration public static int SerialGetchar(int fd) Parameters Type Name Description System.Int32 fd The fd. Returns Type Description System.Int32 The result. SerialOpen(String, Int32) This opens and initialises the serial device and sets the baud rate. It sets the port into “raw” mode (character at a time and no translations), and sets the read timeout to 10 seconds. The return value is the file descriptor or -1 for any error, in which case errno will be set as appropriate. The wiringSerial library is intended to provide simplified control – suitable for most applications, however if you need advanced control – e.g. parity control, modem control lines (via a USB adapter, there are none on the Pi’s on-board UART!) and so on, then you need to do some of this the old fashioned way. Declaration public static int SerialOpen(string device, int baud) Parameters Type Name Description System.String device The device. System.Int32 baud The baud. Returns Type Description System.Int32 The result. SerialPutchar(Int32, Byte) Sends the single byte to the serial device identified by the given file descriptor. Declaration public static void SerialPutchar(int fd, byte c) Parameters Type Name Description System.Int32 fd The fd. System.Byte c The c. SerialPuts(Int32, String) Sends the nul-terminated string to the serial device identified by the given file descriptor. Declaration public static void SerialPuts(int fd, string s) Parameters Type Name Description System.Int32 fd The fd. System.String s The s. SetPadDrive(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public static int SetPadDrive(int group, int value) Parameters Type Name Description System.Int32 group The group. System.Int32 value The value. Returns Type Description System.Int32 The result code. ShiftIn(Byte, Byte, Byte) This shifts an 8-bit data value in with the data appearing on the dPin and the clock being sent out on the cPin. Order is either LSBFIRST or MSBFIRST. The data is sampled after the cPin goes high. (So cPin high, sample data, cPin low, repeat for 8 bits) The 8-bit value is returned by the function. Declaration public static byte ShiftIn(byte dPin, byte cPin, byte order) Parameters Type Name Description System.Byte dPin The d pin. System.Byte cPin The c pin. System.Byte order The order. Returns Type Description System.Byte The result. ShiftOut(Byte, Byte, Byte, Byte) The shifts an 8-bit data value val out with the data being sent out on dPin and the clock being sent out on the cPin. order is as above. Data is clocked out on the rising or falling edge – ie. dPin is set, then cPin is taken high then low – repeated for the 8 bits. Declaration public static void ShiftOut(byte dPin, byte cPin, byte order, byte val) Parameters Type Name Description System.Byte dPin The d pin. System.Byte cPin The c pin. System.Byte order The order. System.Byte val The value. SoftPwmCreate(Int32, Int32, Int32) This creates a software controlled PWM pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used. Use 100 for the pwmRange, then the value can be anything from 0 (off) to 100 (fully on) for the given pin. The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong. Declaration public static int SoftPwmCreate(int pin, int initialValue, int pwmRange) Parameters Type Name Description System.Int32 pin The pin. System.Int32 initialValue The initial value. System.Int32 pwmRange The PWM range. Returns Type Description System.Int32 The result. SoftPwmStop(Int32) This function is undocumented. Declaration public static void SoftPwmStop(int pin) Parameters Type Name Description System.Int32 pin The pin. SoftPwmWrite(Int32, Int32) This updates the PWM value on the given pin. The value is checked to be in-range and pins that haven’t previously been initialized via softPwmCreate will be silently ignored. Declaration public static void SoftPwmWrite(int pin, int value) Parameters Type Name Description System.Int32 pin The pin. System.Int32 value The value. SoftToneCreate(Int32) This creates a software controlled tone pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used. The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong. Declaration public static int SoftToneCreate(int pin) Parameters Type Name Description System.Int32 pin The pin. Returns Type Description System.Int32 The result. SoftToneStop(Int32) This function is undocumented. Declaration public static void SoftToneStop(int pin) Parameters Type Name Description System.Int32 pin The pin. SoftToneWrite(Int32, Int32) This updates the tone frequency value on the given pin. The tone will be played until you set the frequency to 0. Declaration public static void SoftToneWrite(int pin, int freq) Parameters Type Name Description System.Int32 pin The pin. System.Int32 freq The freq. WaitForInterrupt(Int32, Int32) Note: Jan 2013: The waitForInterrupt() function is deprecated – you should use the newer and easier to use wiringPiISR() function below. When called, it will wait for an interrupt event to happen on that pin and your program will be stalled. The timeOut parameter is given in milliseconds, or can be -1 which means to wait forever. The return value is -1 if an error occurred (and errno will be set appropriately), 0 if it timed out, or 1 on a successful interrupt event. Before you call waitForInterrupt, you must first initialise the GPIO pin and at present the only way to do this is to use the gpio program, either in a script, or using the system() call from inside your program. e.g. We want to wait for a falling-edge interrupt on GPIO pin 0, so to setup the hardware, we need to run: gpio edge 0 falling before running the program. Declaration [Obsolete] public static int WaitForInterrupt(int pin, int timeout) Parameters Type Name Description System.Int32 pin The pin. System.Int32 timeout The timeout. Returns Type Description System.Int32 The result code. WiringPiI2CRead(Int32) Simple device read. Some devices present data when you read them without having to do any register transactions. Declaration public static int WiringPiI2CRead(int fd) Parameters Type Name Description System.Int32 fd The fd. Returns Type Description System.Int32 The result. WiringPiI2CReadReg16(Int32, Int32) These read a 16-bit value from the device register indicated. Declaration public static int WiringPiI2CReadReg16(int fd, int reg) Parameters Type Name Description System.Int32 fd The fd. System.Int32 reg The reg. Returns Type Description System.Int32 The result. WiringPiI2CReadReg8(Int32, Int32) These read an 8-bit value from the device register indicated. Declaration public static int WiringPiI2CReadReg8(int fd, int reg) Parameters Type Name Description System.Int32 fd The fd. System.Int32 reg The reg. Returns Type Description System.Int32 The result. WiringPiI2CSetup(Int32) This initializes the I2C system with your given device identifier. The ID is the I2C number of the device and you can use the i2cdetect program to find this out. wiringPiI2CSetup() will work out which revision Raspberry Pi you have and open the appropriate device in /dev. The return value is the standard Linux filehandle, or -1 if any error – in which case, you can consult errno as usual. E.g. the popular MCP23017 GPIO expander is usually device Id 0x20, so this is the number you would pass into wiringPiI2CSetup(). Declaration public static int WiringPiI2CSetup(int devId) Parameters Type Name Description System.Int32 devId The dev identifier. Returns Type Description System.Int32 The result. WiringPiI2CWrite(Int32, Int32) Simple device write. Some devices accept data this way without needing to access any internal registers. Declaration public static int WiringPiI2CWrite(int fd, int data) Parameters Type Name Description System.Int32 fd The fd. System.Int32 data The data. Returns Type Description System.Int32 The result. WiringPiI2CWriteReg16(Int32, Int32, Int32) These write a 16-bit data value into the device register indicated. Declaration public static int WiringPiI2CWriteReg16(int fd, int reg, int data) Parameters Type Name Description System.Int32 fd The fd. System.Int32 reg The reg. System.Int32 data The data. Returns Type Description System.Int32 The result. WiringPiI2CWriteReg8(Int32, Int32, Int32) These write an 8-bit data value into the device register indicated. Declaration public static int WiringPiI2CWriteReg8(int fd, int reg, int data) Parameters Type Name Description System.Int32 fd The fd. System.Int32 reg The reg. System.Int32 data The data. Returns Type Description System.Int32 The result. WiringPiISR(Int32, Int32, InterruptServiceRoutineCallback) This function registers a function to received interrupts on the specified pin. The edgeType parameter is either INT_EDGE_FALLING, INT_EDGE_RISING, INT_EDGE_BOTH or INT_EDGE_SETUP. If it is INT_EDGE_SETUP then no initialisation of the pin will happen – it’s assumed that you have already setup the pin elsewhere (e.g. with the gpio program), but if you specify one of the other types, then the pin will be exported and initialised as specified. This is accomplished via a suitable call to the gpio utility program, so it need to be available. The pin number is supplied in the current mode – native wiringPi, BCM_GPIO, physical or Sys modes. This function will work in any mode, and does not need root privileges to work. The function will be called when the interrupt triggers. When it is triggered, it’s cleared in the dispatcher before calling your function, so if a subsequent interrupt fires before you finish your handler, then it won’t be missed. (However it can only track one more interrupt, if more than one interrupt fires while one is being handled then they will be ignored) This function is run at a high priority (if the program is run using sudo, or as root) and executes concurrently with the main program. It has full access to all the global variables, open file handles and so on. Declaration public static int WiringPiISR(int pin, int mode, InterruptServiceRoutineCallback method) Parameters Type Name Description System.Int32 pin The pin. System.Int32 mode The mode. InterruptServiceRoutineCallback method The method. Returns Type Description System.Int32 The result code. WiringPiSetup() This initialises wiringPi and assumes that the calling program is going to be using the wiringPi pin numbering scheme. This is a simplified numbering scheme which provides a mapping from virtual pin numbers 0 through 16 to the real underlying Broadcom GPIO pin numbers. See the pins page for a table which maps the wiringPi pin number to the Broadcom GPIO pin number to the physical location on the edge connector. This function needs to be called with root privileges. Declaration public static int WiringPiSetup() Returns Type Description System.Int32 The result code. WiringPiSetupGpio() This is identical to wiringPiSetup, however it allows the calling programs to use the Broadcom GPIO pin numbers directly with no re-mapping. As above, this function needs to be called with root privileges, and note that some pins are different from revision 1 to revision 2 boards. Declaration public static int WiringPiSetupGpio() Returns Type Description System.Int32 The result code. WiringPiSetupPhys() Identical to wiringPiSetup, however it allows the calling programs to use the physical pin numbers on the P1 connector only. This function needs to be called with root privileges. Declaration public static int WiringPiSetupPhys() Returns Type Description System.Int32 The result code. WiringPiSetupSys() This initialises wiringPi but uses the /sys/class/gpio interface rather than accessing the hardware directly. This can be called as a non-root user provided the GPIO pins have been exported before-hand using the gpio program. Pin numbering in this mode is the native Broadcom GPIO numbers – the same as wiringPiSetupGpio() above, so be aware of the differences between Rev 1 and Rev 2 boards. Note: In this mode you can only use the pins which have been exported via the /sys/class/gpio interface before you run your program. You can do this in a separate shell-script, or by using the system() function from inside your program to call the gpio program. Also note that some functions have no effect when using this mode as they’re not currently possible to action unless called with root privileges. (although you can use system() to call gpio to set/change modes if needed). Declaration public static int WiringPiSetupSys() Returns Type Description System.Int32 The result code. WiringPiSPIDataRW(Int32, Byte[], Int32) This performs a simultaneous write/read transaction over the selected SPI bus. Data that was in your buffer is overwritten by data returned from the SPI bus. That’s all there is in the helper library. It is possible to do simple read and writes over the SPI bus using the standard read() and write() system calls though – write() may be better to use for sending data to chains of shift registers, or those LED strings where you send RGB triplets of data. Devices such as A/D and D/A converters usually need to perform a concurrent write/read transaction to work. Declaration public static int WiringPiSPIDataRW(int channel, byte[] data, int len) Parameters Type Name Description System.Int32 channel The channel. System.Byte [] data The data. System.Int32 len The length. Returns Type Description System.Int32 The result. WiringPiSPIGetFd(Int32) This function is undocumented. Declaration public static int WiringPiSPIGetFd(int channel) Parameters Type Name Description System.Int32 channel The channel. Returns Type Description System.Int32 Unknown. WiringPiSPISetup(Int32, Int32) This is the way to initialize a channel (The Pi has 2 channels; 0 and 1). The speed parameter is an integer in the range 500,000 through 32,000,000 and represents the SPI clock speed in Hz. The returned value is the Linux file-descriptor for the device, or -1 on error. If an error has happened, you may use the standard errno global variable to see why. Declaration public static int WiringPiSPISetup(int channel, int speed) Parameters Type Name Description System.Int32 channel The channel. System.Int32 speed The speed. Returns Type Description System.Int32 The Linux file descriptor for the device or -1 for error. WiringPiSPISetupMode(Int32, Int32, Int32) This function is undocumented. Declaration public static int WiringPiSPISetupMode(int channel, int speed, int mode) Parameters Type Name Description System.Int32 channel The channel. System.Int32 speed The speed. System.Int32 mode The mode. Returns Type Description System.Int32 Unkown. WpiPinToGpio(Int32) This returns the BCM_GPIO pin number of the supplied wiringPi pin. It takes the board revision into account. Declaration public static int WpiPinToGpio(int wPiPin) Parameters Type Name Description System.Int32 wPiPin The w pi pin. Returns Type Description System.Int32 The result code. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}